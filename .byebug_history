c
sg.answers
c
sg.answers
sg.amswers
c
as = Answer.create(description: answer[:description])
c
as = Answer.create(answer[:description])
c
suggestion[:answers]
suggestion.answers
sg = Suggestion.create(description: suggestion[:description])
exit
suggestion[:description]
suggestion[:desceription]
suggestiondescripton
suggestions
c
result.first.answers
result.first.answers.sample.description
result.uniq!
c
result.uniq
c
reload!
c
suggestion.description.include?(search)
search
c
suggestion.description.include?(search)
c
suggestion.description.include?(search)
search
c
result.uniq
c
search_array = search_suggestion.downcase.split(" ").map{|search| search.gsub(/[^0-9A-Za-z]/, '')}
c
reload
search_suggestion.downcase.split(" ").map{|search| search.gsub(/[^0-9A-Za-z]/, '')}
search_suggestion.downcase.split(" ")
search_array = search_suggestion.downcase.split(" ").map{|search| search.gsub!(/[^0-9A-Za-z]/, '')}
c
"tinggal dimana?".gsub!(/[^0-9A-Za-z]/, '')
search_array
search
result.uniq
c
result.uniq
result.unique
result
c
reload!
result
suggestion
c
suggestion
search
c
suggestion
search
c
suggestion
search
c
suggestion.description.include?(search)
c
suggestion.description.include?(search)
suggestion.description..include?(search)
suggestion.description
suggestion
search
search_array
exit
search
c
search_array[t]
search_array
c
(search_array[t])
search_array
suggestion.description
suggestion.description.include?(search_array[t])
c
suggestions.count
c
suggestion.description.include?(search_array[t])
suggestion.description.include?(search_array[t]) == true
suggestion.description.include?(search_array[t])
suggestion.description.include?(search_array[t] == true)
search_array[t]
c
@suggestions = Suggestion.search(params[:search]) if params[:search].present?
c
params
c
